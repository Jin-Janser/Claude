import pandas as pd
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from category_encoders import TargetEncoder

# 데이터 로드
df = pd.read_csv('train.csv').drop('Id', axis=1)

# 변수 분류
numeric_vars = df.select_dtypes(include='number').columns.tolist()
categorical_vars = df.select_dtypes(exclude='number').columns.tolist()

numeric_vars.remove('SalePrice')  # 종속변수 제외
# 연속형 변수 대체
imputer = IterativeImputer(max_iter=10)
df[numeric_vars] = imputer.fit_transform(df[numeric_vars])

# 범주형 변수 대체
df[categorical_vars] = df[categorical_vars].fillna(df[categorical_vars].mode().iloc[0])

# 데이터 전처리
te = TargetEncoder()
df[categorical_vars] = te.fit_transform(df[categorical_vars], df['SalePrice'])

# 다중공선성 처리
from statsmodels.stats.outliers_influence import variance_inflation_factor
vif = pd.DataFrame()
vif["VIF"] = [variance_inflation_factor(df[numeric_vars].values, i) 
              for i in range(df[numeric_vars].shape[1])]
selected_vars = df[numeric_vars].columns[vif["VIF"] < 5].tolist()

# 모델 구축
from sklearn.linear_model import LassoCV
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler

pipe = make_pipeline(
    StandardScaler(),
    LassoCV(cv=10, alphas=np.logspace(-4, 0, 50))
)
pipe.fit(df[selected_vars], df['SalePrice'])

# 모델 평가
from sklearn.metrics import mean_squared_error
pred = pipe.predict(df[selected_vars])
rmse = np.sqrt(mean_squared_error(df['SalePrice'], pred))
r2 = pipe.score(df[selected_vars], df['SalePrice'])
