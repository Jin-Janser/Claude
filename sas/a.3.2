# 필요한 라이브러리 설치 (주석 처리)
# !pip install pymc3 arviz geopandas folium seaborn scikit-learn libpysal

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# 베이지안 모델링 라이브러리
import pymc3 as pm
import arviz as az
import theano.tensor as tt

# 공간 분석 라이브러리
import geopandas as gpd
from libpysal.weights import Queen, DistanceBand
from libpysal.weights.util import lat2W
import folium

# 기타 라이브러리
from scipy import sparse
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import KFold

# 1. 가상 SEER 데이터 생성 (실제 데이터 접근 제한으로 인해)
np.random.seed(42)

# 지역 정보 (미국 주요 도시 기반)
regions = {
    'region_id': range(1, 51),  # 50개 지역
    'region_name': [f'Region_{i}' for i in range(1, 51)],
    'latitude': np.random.uniform(25.0, 49.0, 50),  # 미국 위도 범위
    'longitude': np.random.uniform(-125.0, -66.0, 50)  # 미국 경도 범위
}

# 인구통계학적 변수
demographics = {
    'age_group': ['20-39', '40-59', '60-79', '80+'],
    'sex': ['Male', 'Female'],
    'race': ['White', 'Black', 'Hispanic', 'Asian', 'Other'],
    'cancer_type': ['Breast', 'Lung', 'Colorectal', 'Prostate']
}

# 조합된 데이터 생성
data_list = []
region_df = pd.DataFrame(regions)

for _, region in region_df.iterrows():
    for year in range(2010, 2020):
        for age in demographics['age_group']:
            for sex in demographics['sex']:
                for race in demographics['race']:
                    for cancer in demographics['cancer_type']:
                        # 성별-암종 조합 필터링 (현실적 제약)
                        if (cancer == 'Prostate' and sex == 'Female') or \
                           (cancer == 'Breast' and sex == 'Male'):
                            continue
                            
                        # 기본 발생률 (성별, 연령, 인종에 따른 차이)
                        base_rate = 50  # 인구 10만명당
                        
                        # 연령 효과
                        age_effect = {'20-39': 0.3, '40-59': 0.8, '60-79': 1.5, '80+': 2.0}[age]
                        
                        # 성별 효과
                        sex_effect = 1.2 if sex == 'Male' else 1.0
                        
                        # 인종 효과
                        race_effect = {'White': 1.0, 'Black': 1.3, 'Hispanic': 0.8, 
                                     'Asian': 0.7, 'Other': 0.9}[race]
                        
                        # 지역 효과 (위도 기반)
                        region_effect = 1 + 0.3 * np.sin(region['latitude'] * np.pi / 180)
                        
                        # 연도 트렌드
                        year_effect = 1 + 0.02 * (year - 2010)
                        
                        # 최종 발생률 계산
                        expected_rate = base_rate * age_effect * sex_effect * race_effect * region_effect * year_effect
                        
                        # 포아송 분포에서 실제 케이스 수 생성
                        population = np.random.randint(5000, 50000)  # 해당 그룹 인구수
                        expected_cases = expected_rate * population / 100000
                        observed_cases = np.random.poisson(max(0.1, expected_cases))
                        
                        data_list.append({
                            'region_id': region['region_id'],
                            'region_name': region['region_name'],
                            'latitude': region['latitude'],
                            'longitude': region['longitude'],
                            'year': year,
                            'age_group': age,
                            'sex': sex,
                            'race': race,
                            'cancer_type': cancer,
                            'cases': observed_cases,
                            'population': population,
                            'crude_rate': (observed_cases / population) * 100000
                        })

# 데이터프레임 생성
seer_data = pd.DataFrame(data_list)

print("=== SEER 데이터 기본 정보 ===")
print(f"총 관측치 수: {len(seer_data):,}")
print(f"지역 수: {seer_data['region_id'].nunique()}")
print(f"연도 범위: {seer_data['year'].min()}-{seer_data['year'].max()}")
print(f"암종 수: {seer_data['cancer_type'].nunique()}")

# 결측치 확인
print(f"\n결측치 수: {seer_data.isnull().sum().sum()}")

# 기술통계
print("\n=== 암 발생률 기술통계 ===")
print(seer_data['crude_rate'].describe())

# 모델 비교를 위한 정보 기준 계산
print("=== 베이지안 모델 비교 ===")

# WAIC 계산
waic_hierarchical = az.waic(trace_hierarchical)
waic_spatial = az.waic(trace_spatial)

# LOO-CV 계산 (Pareto k 진단 포함)
loo_hierarchical = az.loo(trace_hierarchical)
loo_spatial = az.loo(trace_spatial)

# 결과 정리
model_comparison = pd.DataFrame({
    'Model': ['Hierarchical', 'Spatial'],
    'WAIC': [waic_hierarchical.waic, waic_spatial.waic],
    'WAIC_SE': [waic_hierarchical.waic_se, waic_spatial.waic_se],
    'LOO': [loo_hierarchical.loo, loo_spatial.loo],
    'LOO_SE': [loo_hierarchical.loo_se, loo_spatial.loo_se]
})

print(model_comparison)

# Pareto k 진단
print(f"\n계층적 모델 - Pareto k > 0.7: {(loo_hierarchical.pareto_k > 0.7).sum()}개")
print(f"공간 모델 - Pareto k > 0.7: {(loo_spatial.pareto_k > 0.7).sum()}개")

# 모델 가중치 계산 (WAIC 기반)
waic_values = np.array([waic_hierarchical.waic, waic_spatial.waic])
relative_waic = waic_values - np.min(waic_values)
weights = np.exp(-0.5 * relative_waic)
weights = weights / np.sum(weights)

model_comparison['Weight'] = weights
print(f"\n모델 가중치:")
print(model_comparison[['Model', 'Weight']])

# 사후 예측 검사 (Posterior Predictive Checks)
with hierarchical_model:
    ppc_hierarchical = pm.sample_posterior_predictive(trace_hierarchical, samples=100)

# 사후 예측 검사 시각화
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

# 관측값 vs 예측값
y_obs = seer_data['cases'].values
y_pred_mean = ppc_hierarchical['cases_obs'].mean(axis=0)

axes[0].scatter(y_obs, y_pred_mean, alpha=0.5)
axes[0].plot([0, y_obs.max()], [0, y_obs.max()], 'r--')
axes[0].set_xlabel('Observed Cases')
axes[0].set_ylabel('Predicted Cases (Mean)')
axes[0].set_title('Posterior Predictive Check')

# 잔차 분석
residuals = y_obs - y_pred_mean
axes[1].hist(residuals, bins=30, alpha=0.7)
axes[1].set_xlabel('Residuals')
axes[1].set_ylabel('Frequency')
axes[1].set_title('Residual Distribution')

plt.tight_layout()
plt.show()

# 지역별 암 발생률 사후 분포 추정
def extract_regional_effects(trace, region_coords):
    """지역별 효과 추출 및 크레디블 구간 계산"""
    # 지역별 랜덤 효과 (계층적 모델)
    if 'alpha_region' in trace.posterior.data_vars:
        alpha_region = trace.posterior['alpha_region']
        regional_effects = {
            'region_id': range(len(region_coords)),
            'mean': alpha_region.mean(dim=['chain', 'draw']).values,
            'sd': alpha_region.std(dim=['chain', 'draw']).values,
            'ci_lower': alpha_region.quantile(0.025, dim=['chain', 'draw']).values,
            'ci_upper': alpha_region.quantile(0.975, dim=['chain', 'draw']).values
        }
    else:
        # 공간 모델의 경우
        alpha_spatial = trace.posterior['alpha_spatial']
        regional_effects = {
            'region_id': range(len(region_coords)),
            'mean': alpha_spatial.mean(dim=['chain', 'draw']).values,
            'sd': alpha_spatial.std(dim=['chain', 'draw']).values,
            'ci_lower': alpha_spatial.quantile(0.025, dim=['chain', 'draw']).values,
            'ci_upper': alpha_spatial.quantile(0.975, dim=['chain', 'draw']).values
        }
    
    return pd.DataFrame(regional_effects)

# 계층적 모델 지역 효과
regional_effects_hier = extract_regional_effects(trace_hierarchical, region_coords)
regional_effects_hier['model'] = 'Hierarchical'

# 공간 모델 지역 효과  
regional_effects_spatial = extract_regional_effects(trace_spatial, region_coords)
regional_effects_spatial['model'] = 'Spatial'

# 좌표 정보 결합
regional_effects_hier = pd.merge(regional_effects_hier, 
                                region_coords.reset_index(), 
                                left_on='region_id', right_on='region_id')

regional_effects_spatial = pd.merge(regional_effects_spatial,
                                   region_coords.reset_index(),
                                   left_on='region_id', right_on='region_id')

# 지역별 위험도 시각화
fig, axes = plt.subplots(1, 2, figsize=(15, 6))

# 계층적 모델 결과
scatter1 = axes[0].scatter(regional_effects_hier['longitude'], 
                          regional_effects_hier['latitude'],
                          c=regional_effects_hier['mean'],
                          s=60, cmap='RdYlBu_r', alpha=0.7)
axes[0].set_title('Hierarchical Model - Regional Effects')
axes[0].set_xlabel('Longitude')
axes[0].set_ylabel('Latitude')
plt.colorbar(scatter1, ax=axes[0])

# 공간 모델 결과
scatter2 = axes[1].scatter(regional_effects_spatial['longitude'],
                          regional_effects_spatial['latitude'],
                          c=regional_effects_spatial['mean'],
                          s=60, cmap='RdYlBu_r', alpha=0.7)
axes[1].set_title('Spatial Model - Regional Effects')
axes[1].set_xlabel('Longitude')
axes[1].set_ylabel('Latitude')
plt.colorbar(scatter2, ax=axes[1])

plt.tight_layout()
plt.show()

# 인구통계학적 요인별 위험비 계산
def calculate_risk_ratios(trace):
    """인구통계학적 요인별 위험비 계산"""
    risk_ratios = {}
    
    for var in ['beta_age', 'beta_sex', 'beta_race', 'beta_year']:
        if var in trace.posterior.data_vars:
            beta = trace.posterior[var]
            rr_mean = np.exp(beta.mean(dim=['chain', 'draw']).values)
            rr_ci_lower = np.exp(beta.quantile(0.025, dim=['chain', 'draw']).values)
            rr_ci_upper = np.exp(beta.quantile(0.975, dim=['chain', 'draw']).values)
            
            risk_ratios[var] = {
                'risk_ratio': rr_mean,
                'ci_lower': rr_ci_lower,
                'ci_upper': rr_ci_upper
            }
    
    return risk_ratios

# 위험비 계산
rr_hierarchical = calculate_risk_ratios(trace_hierarchical)
rr_spatial = calculate_risk_ratios(trace_spatial)

print("=== 인구통계학적 요인별 위험비 (계층적 모델) ===")
for var, values in rr_hierarchical.items():
    print(f"{var}: RR = {values['risk_ratio']:.3f} "
          f"(95% CI: {values['ci_lower']:.3f} - {values['ci_upper']:.3f})")

# Hotspot 지역 식별 (상위 10% 위험 지역)
threshold_95 = np.percentile(regional_effects_hier['mean'], 90)
hotspots = regional_effects_hier[regional_effects_hier['mean'] > threshold_95]

print(f"\n=== Hotspot 지역 (상위 10% 위험) ===")
print(f"Hotspot 지역 수: {len(hotspots)}")
print("지역별 위험도:")
for _, region in hotspots.iterrows():
    print(f"Region {region['region_id']}: {region['mean']:.3f} "
          f"(95% CI: {region['ci_lower']:.3f} - {region['ci_upper']:.3f})")
